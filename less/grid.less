@import (once) "include/vars";
@import (once) "include/mixins";

@gridColumns12: 12;
@gridGapSize: 12px;
@gridCellBaseSize: 8.333335%;

.grid {
    .set-relative();
}

.row {
    .clear();
    display: flex;
    flex-wrap: wrap;
    margin-left: -@gridGapSize;
    margin-right: -@gridGapSize;
}

.cell {
    display: block;
    flex: 1 1 0;
    padding: @gridGapSize;
    max-width: 100%;
}

.cell-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: none;
}

// colspan
.generate-colspan(@gridColumns12);
.generate-colspan(@j, @k: 2) when (@k =< @j){
    .colspan-@{k}, .cell-@{k} {
        flex: 0 0 @gridCellBaseSize * @k;
        max-width: @gridCellBaseSize * @k;
    }
    .generate-colspan(@j, (@k + 1));
}

// offset
.generate-offset(@gridColumns12 - 1);
.generate-offset(@j) when (@j > 0){
    .offset-@{j} {
        margin-left: @gridCellBaseSize * @j;
    }
    .generate-offset(@j - 1);
}

.stub {
    flex: none;
    display: block;
    padding: @gridGapSize;
}

.grid {
    &.no-gap {
        .row {
            margin-left: 0;
            margin-right: 0;

            .cell, .stub {
                padding: 0;
            }
        }
    }
}

.generate-order(@gridColumns12);
.generate-order(@j) when (@j > 0){
    .order-@{j} {
        order: @j;
    }
    .generate-order(@j - 1);
}

.align-items {
    &-center {
        align-items: center !important;
    }
    &-baseline {
        align-items: baseline !important;
    }
    &-end {
        align-items: flex-end !important;
    }
    &-start {
        align-items: flex-start !important;
    }
    &-stretch {
        align-items: stretch !important;
    }
    &-inherit {
        align-items: inherit !important;
    }
}


.generate-grid-media-options(@mediaBreakpointListDesktopLength);
.generate-grid-media-options(@name, @i: 1) when (@i <= @mediaBreakpointListDesktopLength) {
    @m: extract(@mediaBreakpointListDesktop, @i);

    @media screen and (max-width: @@m) {
        .cell-@{m}-hidden {
            display: none !important;
        }

        .cell-@{m}-full {
            flex: 0 0 100%;
            max-width: 100%;
        }

        .cell-@{m}-half {
            flex: 0 0 50%;
            max-width: 50%;
        }

        .cell-@{m}-one-third {
            flex: 0 0 33.3333333%;
            max-width: 33.3333333%;
        }

        .cell-@{m}-two-third {
            flex: 0 0 66.6666666%;
            max-width: 66.6666666%;
        }

        .cell-@{m}-quarter {
            flex: 0 0 25%;
            max-width: 25%;
        }

        .cell-@{m} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }

        .cell-@{m}-auto {
            flex: 0 0 auto;
            max-width: none;
        }

        .generate-colspan(@gridColumns12);
        .generate-colspan(@j, @k: 1) when (@k =< @j) {
            .colspan-@{k}, .cell-@{m}-@{k} {
                flex: 0 0 @gridCellBaseSize * @k ;
                max-width: @gridCellBaseSize * @k ;
            }
            .generate-colspan(@j, (@k + 1));
        }

        .generate-offset(@gridColumns12 - 1);
        .generate-offset(@j) when (@j > 0){
            .offset-@{m}-@{j} {
                margin-left: @gridCellBaseSize * @j;
            }
            .generate-offset(@j - 1);
        }

        .generate-order(@gridColumns12);
        .generate-order(@j) when (@j > 0){
            .order-@{m}-@{j} {
                order: @j;
            }
            .generate-order(@j - 1);
        }

    }

    .generate-grid-media-options(@name, @i + 1);
}
